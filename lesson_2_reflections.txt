What happens when you initialize a repository? Why do you need to do it?

A hidden folder called .git is added. The folder contains meta-data about the 
new repository.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area holds files that you want to commit together. They may be one or a few
files from the working directory, or it could be all of them. The staging area is not
yet committed. The value is being able to organize commits in logical chunks by putting
files you want to commit together before actually committing them.


How can you use the staging area to make sure you have one commit per logical
change?

I put all the files I want to commit into the staging area. These files will
represent the logical change. 


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

A branch would be useful to me when I have a working master but I want to experiment, or 
if I want to make different language versions. 


How do the diagrams help you visualize the branch structure?

Diagrams have always helped me to learn new concepts. They are visual, concrete aids
to understanding what is happening to otherwise abstract concepts. They helped me to 
understand how a file becomes unreachable. 


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together combines all the committed changes of one branch with the 
other. Using the diagram to show the merge will also show what commits are accessible in 
the new merged branch and which ones aren't.



What are the pros and cons of Git's automatic merging vs. always doing merges
manually?


The pros for automatic merging is that it is easy and takes less time, 
but the con is that there will be merges that don't make sense. However, it's not
completely automatic, as some conflicts still have to be resolved manually, as they should
be.